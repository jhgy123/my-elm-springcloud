####bootstrap(.yml/.properties)可以理解成系统级别的一些参数配置，这些参数一般是不会变动的，优先加载此配置
# nacos配置
server:
  port: 14000

spring:
#  main:
#    web-application-type: reactive
  application:
    name: gateway-server
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 #Nacos服务注册中心地址
      config:
        server-addr: localhost:8848 #Nacos作为配置中心地址
        file-extension: yaml #指定yaml格式的配置
        namespace: elmserver-springcloud
        group: user_group
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:  #路由配置
        - id: user_server_route                #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://user-server                #匹配后提供服务的路由地址
          predicates:
            - Path=/userconfig/*/**,/user/*/**,/user     #configAPI路径,微服务具体功能路径

        - id: orders_server_route              #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://orders-server              #匹配后提供服务的路由地址
          predicates:
            - Path=/ordersconfig/*/**,/orders/*/**,/orderdetailet/*/**,/orders,/orderdetailet     #configAPI路径,微服务具体功能路径

        - id: food_server_route                #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://food-server                #匹配后提供服务的路由地址
          predicates:
            - Path=/foodconfig/*/**,/food/*/**,/food     #configAPI路径,微服务具体功能路径

        - id: deliveryaddress_server_route     #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://deliveryaddress-server     #匹配后提供服务的路由地址
          predicates:
            - Path=/deliveryaddressconfig/*/**,/deliveryaddress/*/**,/deliveryaddress       #configAPI路径,微服务具体功能路径

        - id: cart_server_route                 #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://cart-server                 #匹配后提供服务的路由地址
          predicates:
            - Path=/cartconfig/*/**,/cart/*/**,/cart      #configAPI路径,微服务具体功能路径

        - id: business_server_route             #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://business-server             #匹配后提供服务的路由地址
          predicates:
            - Path=/businessconfig/*/**,/business/*/**,/business       #configAPI路径,微服务具体功能路径

      # 跨域配置
      globalcors:
        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
        cors-configurations:
          '[/**]': # 匹配所有请求
            allowedHeaders: "*"  # 跨域处理 允许所有的请求头
            allowedOrigins: "*"  # 跨域处理 允许所有的域
            allowedMethods:      # 支持的方法
              - GET
              - POST
              - PUT
              - DELETE
#          '[**]': # 匹配所有请求
#            allowedHeaders: "*"  # 跨域处理 允许所有的请求头
#            allowedOrigins: "*"  # 跨域处理 允许所有的域
#            allowedMethods: # 支持的方法
#              - GET
#              - POST
#              - PUT
#              - DELETE
#      filter:
#        remove-hop-by-hop:
#          headers:
#              # 以下是去掉网关默认去掉的请求响应头
#            - trailer
#            - te
#            - keep-alive
#            - transfer-encoding
#            - upgrade
#            - proxy-authenticate
#            - connection
#            - proxy-authorization
#            - x-application-context
#            # 以下是去掉服务层面定义的跨域
#            - access-control-allow-credentials
#            - access-control-allow-headers
#            - access-control-allow-methods
#            - access-control-allow-origin
#            - access-control-max-age
#            - vary
#      globalcors:
#        corsConfigurations:
#          '[/**]':
#            allowCredentials: true
#            allowedOrigins: "*"
#            allowedHeaders: "*"
#            allowedMethods: "*"
##            maxAge: 3628800


#        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          #uri: http://localhost:8001          #匹配后提供服务的路由地址
#          uri: lb://cloud-payment-service #匹配后提供服务的路由地址
#          predicates:
#            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由
            #- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]
            #- Cookie=username,zzyy
            #- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式

#  config:
## 引入通用的配置文件-数据库连接配置文件
#    import: nacos:commons-dev.yaml?group=COMMONS_GROUP

# ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}
# nacos-config-client-dev.yaml

# nacos-config-client-test.yaml   ----> config.info